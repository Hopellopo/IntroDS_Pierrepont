2 -> c
2L -> d
attribute(c)
attributes(c)
setwd("C:/Users/jloum_000/Desktop/Senior CS")
2 -> c
2L -> d
attributes(c)
v = c(1, 2, 3, 4)
2 -> c
2L -> d
attributes(c)
v = c(1, 2, 3, 4)
v+1
v = c(d)
2 -> c
attributes(c)
v = c(d)
2 -> c
attributes(c)
v = c(x)
2 -> c
attributes(c)
v = c(1, 2, 3, 4)
c(v, "d")
library(swirl)
swirl()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(r)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste('Programming', 'is', 'fun!')
submit()
telegram("Your", "Mother", "Was a Hamster!")
submit()
madlibs("My butt", "butt-like", "my butt")
mad_libs("My butt", "butt-like", "my butt")
mad_libs(place = "My butt", adjective = "butt-like", noun = "my butt")
submit()
submit()
submit()
'I' %p% "love" %p% "R"
'I' %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
library(swirl)
swirl()
as.character(cls_list)
sapply(cls_list)
?sapply
simplify2array().sapply(cls_list, viewinfo)
simplify2array().sapply(cls_list, 'viewinfo')
sapply(cls_list, 'viewinfo')
cls_vect <- sapply(flags, class())
cls_vect <- sapply(flags, 'class')
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1)
ok()
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, summary)
tapply()
tapply(flags$population, flags$landmass[1:6], summary)
tapply(flags$population, flags$landmass, summary)
package(swirl)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
library swirl
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(\)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(filps2)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(rpois(5, 10))
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm = colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXLtSys.time()
as.POSIXltSys.time()
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
library(swirl)
swirl()
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t3)
class(t4)
Sys.time() > t1
Sys.time - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", main = "My Plot")
plot(carsmain = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
data(mtcars)
play()
head(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
ls()
x <- data.frame(nrow = 5, ncol = 3)
?sample
sample(1:5)
sample(1:5, replace = T)
sample(1:5)
x
?data.frame
x <- data.frame(var1 = sample(1:5), var2 = sample(6:10), var3 = sample(11:15))
x
x$var1
set.sid(500)
set.seed(500)
x <- data.frame(var1 = sample(1:5), var2 = sample(6:10), var3 = sample(11:15))
x
x[1]
x[, 1]
x[1, ]
x[1:3, c(var2, var3)]
x[1:3, c('var2', 'var3')]
paste(x[1:3, ], paste(x$var2, x$var3))
x[1:3, c('var2', 'var3')]
d = x[, c(1, 3)]
d
d$var1 < 3
paste(d[d$var1 < 3], d[d$var3 < 11])
x
x[x$var1 < 3]
x[x$var1 < 3,]
x[c(x$var1 < 3, x$var3 > 11),]
x[x$var1 < 3 & x$var3>11,]
library(swirl)
swirl()
exit()
library(ggplot2)
install.packages("ggplot2")
library(swirl)
swirl()
swirl()
install_course("Exploratory_Data_analysis")
install_course("Exploratory_Data_analysis")
install_course("Exploratory Data Analysis")
swirl()
swirl()
install.packages("rmarkdown")
library(rmarkdown)
?source
getwd()
source("/IntroDS/IntroDS_Pierrepont/Rprog/ProgAssessments/ProgAssessment1")
source("../IntroDS/IntroDS_Pierrepont/Rprog/ProgAssessments/ProgAssessment1/complete.R")
source("IntroDS/IntroDS_Pierrepont/Rprog/ProgAssessments/ProgAssessment1/complete.R")
d
path_to_course
complete()
plot(testfn())
source("testfn.R")
plot(testfn())
?echo
emptycars
setwd("IntroDS/IntroDS_Pierrepont/Rprog/ProgAssessments/ProgAssessment2/")
source("rankall.R")
rankall("heart attack", "worst")
rankall("pneumonia", "worst")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
x <- subset(data, State == "WY")
source("rankall.R")
rankall("pneumonia", "worst")
outcome = 23
x <- subset(data, State == state)
x <- subset(data, State == "WY")
x <- x[!is.na(as.numeric(x[, outcome])), ]
x <- x[order(as.numeric(x[, outcome])), ]
View(x)
x <- subset(data, State == "WY")
x <- x[order(as.numeric(x[, outcome])), ]
View(x)
source("rankall.R")
rankall("pneumonia", "worst")
rankall("heart attack", 20)
rankall("heart failure", 10)
rankall("heart failure", 10)
View(x)
x <- x[order(as.numeric(x[, 17])), ]
View(x)
rankall("heart failure")
?in
source("Best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
